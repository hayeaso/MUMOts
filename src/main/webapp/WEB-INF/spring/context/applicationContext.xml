<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd
 	  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

   <!-- Scan for  transaction-based resources -->
   <context:component-scan base-package="com.pm.onlinetest" />
     
   <tx:annotation-driven transaction-manager="transactionManager"/>
   
    <!-- The jpa:repositories scans for all interfaces that extend  Repository and 
      creates implementations for use at runtime.  -->
  <jpa:repositories base-package="com.pm.onlinetest.repository"/>
 
   <bean id="entityManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="packagesToScan" value="com.pm.onlinetest.domain" />
      
      <!--  provider-specific initialization,etc. -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>     
      <property name="jpaProperties">
         <props>
	<!-- validate: validate the schema, makes no changes to the database. update: 
		update the schema. create: creates the schema, destroying previous data. 
		create-drop: drop the schema at the end of the session. These options intended 
		to be developers tools and not to facilitate any production level databases 
		<prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
			<prop key="hibernate.hbm2ddl.auto">update</prop>
            <!--  <prop key="hibernate.show_sql">true</prop>  -->
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
            <prop key="hibernate.hbm2ddl.import_files">populate.sql</prop>
         </props>
      </property>
   </bean>
 
 	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/onlinetest?createDatabaseIfNotExist=true" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>


   <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManager" />
   </bean>
 <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->

  <bean id="persistenceExceptionTranslationPostProcessor"
       class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
     <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
         <property name="host" value="smtp.gmail.com"/>
         <property name="port" value="25"/>
         <property name="username" value="mumtestlink@gmail.com"/>
         <property name="password" value="MumTestLink12345"/>
         <property name="javaMailProperties">
             <props>
                 <prop key="mail.transport.protocol">smtp</prop>
                 <prop key="mail.smtp.auth">true</prop>
                 <prop key="mail.smtp.starttls.enable">true</prop>
                 <prop key="mail.debug">true</prop>
             </props>
         </property>
     </bean>
</beans>
