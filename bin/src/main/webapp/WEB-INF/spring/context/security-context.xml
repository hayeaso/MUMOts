<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable Method level [vs URL level] authorization This work for ROOT 
		WEB APPLICATION Level scanned components Does NOT recognize WEB Application 
		level components - for THAT need to place enable line in Dispatcher-servlet -->
	<security:global-method-security
		pre-post-annotations="enabled" />

	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization - allows SPEL syntax -->
	
	<!-- Security configuration for Student Access Code -->
	<security:http pattern="/test/*" use-expressions="true">
	   <security:csrf disabled="true"/>
		<!-- <security:access-denied-handler error-page="/test/403" />
		<security:intercept-url pattern="/test/access" access="isAnonymous()" />
		<security:intercept-url pattern="/test/**" access="hasRole('ROLE_STUDENT')" /> -->
		
	    <security:form-login login-page="/test" always-use-default-target="false" />
	</security:http>
	
	
	<security:http use-expressions="true" pattern="/**">
		<security:csrf disabled="true" />

		<!-- if non-standard ports for HTTP and/or HTTPS, you can specify them 
			here -->
		<!-- <security:port-mappings> <security:port-mapping http="9080" https="9443"/> 
			</security:port-mappings> -->
		<!-- We will just use web.xml error for access-denied -->
		<!-- Other Options to redirect exception for web authorization -->
		<!-- <security:access-denied-handler error-page="/error-forbidden" /> <security:access-denied-handler 
			ref="controllerExceptionHandler" /> -->
		<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
		<!-- the more specific rules need to come first, followed by the more general 
			ones. -->
		<!-- COMMENT out the following to see @Service METHOD level authorization -->	
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/coach/**" access="hasRole('ROLE_COACH')" />
		<security:intercept-url pattern="/dba/**" access="hasRole('ROLE_DBA')" />
<!-- 		<security:intercept-url pattern="/test/show*" access="hasRole('ROLE_STUDENT')" /> -->
		<!-- Switch to HTTPS -->
		<!-- <security:intercept-url pattern="/login" access="isAnonymous()" requires-channel="https"/> 
			<security:intercept-url pattern="/logout" access="hasRole('ROLE_ADMIN')" 
			requires-channel="http"/> -->
		<!-- BASIC login -->
		<!-- <security:form-login /> -->
		<!-- always-use-default-target overrides where login was triggered routes 
			to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username,password,login-processing renames j_security_* 
			stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url -->
		<security:form-login login-page="/login"
			login-processing-url="/postLogin" username-parameter="username"
			password-parameter="password" default-target-url="/rolecheck"
			always-use-default-target="true" authentication-failure-url="/loginfailed" />
		<!-- -->
		<security:logout logout-success-url="/logout"
			delete-cookies="JSESSIONID" logout-url="/doLogout" />
		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout logout-url= 
			"/doLogout" REPLACES it NOTE: is it JUST a URL naming convention - no mapping 
			occurs -->
		<!-- enable remember me -->
		<security:remember-me data-source-ref="dataSource"
			token-validity-seconds="86400" remember-me-parameter="keepMe" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="bcrypt" />	
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username, password, enabled from user where username=?"
				authorities-by-username-query="select u1.username, u2.authority from user u1, authority u2 where u1.userId = u2.userId and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
	    